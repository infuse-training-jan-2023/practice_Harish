exercise 2)

pipeline {
    agent any

    stages {
        stage('create file') {
            steps {
                bat ''' 
                MKDIR  "./jenkins"
                echo "welcome to jenkins" > "./jenkins/welcome.txt" 
                '''
            }
        }
    }
}


exercise 3)
pipeline {
    agent any

    stages {
        stage('build') {
            steps {
                echo env.STAGE_NAME
            }
        }
        stage('test') {
            steps {
                echo env.STAGE_NAME
            }
        }
    }
}


exercise 6b)

pipeline {
    agent any
    
    parameters{ 
     string(name: 'git_repo_url' , description:'git repository url' , defaultValue :'https://github.com/infuse-training-jan-2023/practice_Harish/')
     string(name: 'git_branch' , description:'working branch' , defaultValue :'jenkins/ruby')
     string(name: 'git_directory' , description:'working directory' , defaultValue :'practice_Harish')
    }
   
    stages {
        stage('build') {
            steps {
              bat """
              git clone ${git_repo_url}
              cd ./practice_Harish
              git switch ${git_branch}
              ruby unit_test.rb
              """
            }
        }
    }
}


exercise 7)

pipeline {
    agent any
    
    parameters{ 
     string(name: 'git_repo_url' , description:'git repository url' , defaultValue :'https://github.com/infuse-training-jan-2023/practice_Harish/')
     string(name: 'git_branch' , description:'working branch' , defaultValue :'jenkins/ruby-1')
     string(name: 'git_directory' , description:'working directory' , defaultValue :'practice_Harish')
    }
   
    stages {
        stage('build') {
            steps {
              bat """
              git clone ${git_repo_url}
              cd ./practice_Harish
              git switch ${git_branch}
              ruby unit_test.rb
              git switch jenkins/ruby
              git merge jenkins/ruby-1
              """
            }
        }
    }
}

exercise 8)
import groovy.json.JsonSlurperClassic

pipeline {
    agent any

    stages {
        stage("fetchdata") {
            steps {
                script {
                    try{
                        def postmanGet  = new URL('https://jsonplaceholder.typicode.com/todos')
                        def getConnection =postmanGet.openConnection()
                        getConnection.requestMethod ='GET'
                        assert getConnection.responseCode ==200
                        def resp =getConnection.getInputStream().getText()
                        println (resp)
                        def jsonSlurper = new JsonSlurperClassic()
                        def data = jsonSlurper.parseText(resp)
                        data.each{if(it.completed == false)println it}
                        }
                    catch(err)
                        {
                            echo "Failed: ${err}"
                        }
                    }
                }
            }
        }
    }
